一、Spring的核心
1、Spring之旅
2、基本Bean装配
	2.1、容纳Spring
		1、BeanFactory->AppliactionContext
		2、ClassPathXmlAppliationContext
		3、FileSystemXmlAppliationContext
			...
		4、bena的生命周期：
			第一步：创建
			第二步：设置属性
			第三步：设置名称
					{
					设置Bean的名称到BeanFactory（如果实现了BeanNameAwave）
					设置Bean的BeanFactory回调(如果实现了BeanFactoryAwave)
					设置Bean的ApplicationContext（如果实现了ApplicationContextAwave）
					}
			第四步：预处理
					{
					初始化之前的预处理（如果实现了BeanPostProcessor，调用postProcessBeforeInitialization方法）
					}
			第五步：初始化
					{
					（如果实现了InitializingBean）
					如果自定义初始化，继续调用自定义初始化
					}
			第六步：预处理
					{
					初始化之后的预处理（如果实现了BeanPostProcessor，调用postProcessAfterInitialization方法）
					}
			第七步：使用
			第八步：销毁
					{
					（如果实现了DisposableBean）
					如果自定义销毁，继续调用自定义初始化
					}
					
	2.2、创建Bean
		构造、setter
	2.3、注入Bean
		1、单一属性注入
		2、集合注入（list\set\map\property）
	2.4、自动注入
		1、基于Name\基于Type
	2.5、控制Bean
		1、Bean的范围（单例、每次创建新实例）
		2、Bean的初始化和销毁
	2.6、总结
3、高级Bean装配
	3.1、父子Bean
	3.2、方法注入
	...
4、通知Bean
	4.1、AOP简介
		1、通知（Advice）:切面的功能被称为通知，其定义了切面是做什么，何时去做(What\When（前、后、异常、围绕）)
		2、连接点（JoinPoint）：可以被切面插入的功能点
		3、切入点（CutPoint）：切面织入的点，叫做切入点，其指出了切面在哪里切入交叉事务(Where)
		4、通知者（Advisor）:用于关联通知和切入点，组件一个真正的切面
		5、切面（Aspect）：由通知和切入点组成，一个概念上的含义
		6、目标（Target）:需要Aop功能的对象，在利用ProxyBeanFactory创建其的时候，会给其添加AOP(交叉事务)功能
		7、代理（Proxy）：在目标对象添加通知之后的创建的新对象
		8、引入（Introduce）
		9、织入（Waver）：将切面应用到目标对象上形成新的代理对象过程称为织入
	4.2、创建典型的Spring切面
		1、定义通知、配置切入点、配置通知者
		2、基于注解的方式，定义切面
	4.3、自动代理
		1、在创建bean的时候，自动创建AOP切面
	4.4、定义纯粹的POJO切面
		1、使用配置文件的方式，将一个纯粹的POJO变成切面
	4.5、注入AspectJ切面
		1、定义更加强大的切面
	4.6、总结
		创建切面的三种方式：
		1、典型的方式：定义POJO，实现通知相关接口，变成切面
		2、使用注解方式，将一个POJO转成一个切面
		3、使用配置（<aop:config>标签）将POJO转成一个切面
		自动代理，大大简化的AOP的配置，在创建Bean的时候，通过自动代理，寻找符合切入点的切面，实现AOP的自动代理。

二、企业Spring
5、使用数据库
	5.1、Spring的数据访问哲学
		1、Spring数据访问构建的异常体系：细化了异常种类、将检查异常转变成非受检异常。
		2、数据访问模板化：比如，SqlMapClientTemplate,通过模板方法，简化了大量的代码
		3、使用DAO支持类：比如基于iBatis的DAO（XXXDaoImpl extends SqlMapClientDaoSupport）。
	5.2、配置数据源
		一般使用commons包下的DBCP（database connection pool）方式
	5.3、在Spring中使用JDBC
	5.4、在Spring中使用Hibernate
	5.5、在Spring中使用JPA
	5.6、在Spring中使用iBatis
		1、Dao实现类中直接注入SqlMapClientTemplate
		2、定义基于iBatis的Dao实现类(倾向于使用,配置更加优雅)
	5.7、缓存	
6、事物管理
	6.1、理解事务ACID
		原子性Atomic、一致性Consistent、隔离性Isolated、持久性Durable
	6.2、选择事务管理器
	6.3、在spring中编写事务
		配置TransactionManager并注入到TransactionTemplate，最后将TransactionTemplate注入Service
	6.4、声明式事务
		事物的传播行为：必须在事务中、必须没有事务、嵌套（嵌套的事物可以独立的提交或是回滚）、请求（有事务就加入，否则创建信新事务（默认））、总是创建新事务、无所谓（有就加入，没有也可以）
		事务隔离级别：默认、允许脏读、不允许脏读、不允许不可重复读、不允许幻读
		回滚规则：异常时回滚
		只读
		超时
	补充：
	脏读：读取到了前一个事物中没有提交的事物。
	不可以重复读的重点在于修改：同样的条件，二次读取出的数据值不相同，有修改。
	幻读的重点在于新增、删除：同样的条件，二次读取的数据记录数不相同，有新增或删除。	
7、保护Spring
	安全连接器-》认证管理器、访问决策管理器、运行身份管理器、调用后管理器
	：用户名/密码				功能权限控制					数据权限控制
	：功能权限：用户、角色、权限（增、删、改、查）
	：数据权限：关联业务，控制相对迥异
8、Spring和基于POJO的远程服务
	使用RMI、Spring HTTP Invoke等方式实现远程过程调用（RPC）
	客户端：通过远程访问配置，加载Bean
	服务端：制定POJO提供远程访问功能
	客户端可以完全无感知的访问远程方法；服务端通过配置，将POJO转成一个RMI访问接口
	注意：效率问题
9、在Spring中建立契约优先服务
	使用Trang生成XSD文件
10、Spring消息
			

三、Spring客户端

总结：
1、DI实现对象之间的解耦
2、AOP实现交叉事物和对象的解耦
3、IOC负责Bean的创建、管理等